<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:dbconfig/jdbc.properties"
                                  ignore-unresolvable="true" />
    <tx:annotation-driven transaction-manager="txActiviti"/>

    <bean id="txActiviti"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceActiviti"></property>
    </bean>

    <bean id="dataSourceActiviti" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">

        <property name="driverClassName" value="${driver}"/>
        <property name="url"      value="${activiti.url}"/>
        <property name="username" value="${name}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="2" />
        <property name="minIdle" value="2" />
        <property name="maxActive" value="20" />
        <property name="maxWait" value="60000" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="180" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false" />
    </bean>



    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSourceActiviti"/>
        <property name="transactionManager" ref="txActiviti"/>
        <property name="databaseSchemaUpdate" value="true"/>
        <property name="dbIdentityUsed" value="false"/>
        <!--<property name="jobExecutorActivate" value="false"/>-->
    </bean>


    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>


    <bean id="repositoryService" factory-bean="processEngine"
          factory-method="getRepositoryService"/>

    <bean id="runtimeService" factory-bean="processEngine"
          factory-method="getRuntimeService"/>

    <bean id="taskService" factory-bean="processEngine"
          factory-method="getTaskService"/>

    <bean id="historyService" factory-bean="processEngine"
          factory-method="getHistoryService"/>

    <bean id="managementService" factory-bean="processEngine"
          factory-method="getManagementService"/>

    <bean id="identityService" factory-bean="processEngine"
          factory-method="getIdentityService"/>


</beans>